//Configuración repositorio 
def credencialesGIT = "userGitH"
def urlGIT = "https://github.com/jacampano/pruebasWebApp"
def rama = "main"

// Herramientas y servidores
def versionJDK = "JDK11"
def versionMaven = "Maven-3.8.6"
def dependencyCheckTool = "DC-7.3.0"
def sonarScannerTool = "SonarScanner"
def sonarToken = "SonarToken"
def instalacionSonar = "SonarLab"

//Condiciones ejecución fases --
def realizarCompilacion = true
def analizarConSonar = true
def esperarQG = false
def analizarConOWASP = true
def realizarPruebasUnitarias = true
def realizarDespliegue = true

node {
    stage('Inicialización') {
        cleanWs()
        /*
        // Si se ejecuta a través de un webHook de Gitlab, podríamos obtener la información de la URL del repo y la rama de las siguientes propiedades
        script {
            urlGIT=env.gitlabSourceRepoHttpUrl
            rama=env.gitlabBranch
        }
        */
    }

    stage('Descarga código fuente') {
        echo "--- Obtener Codigo Fuente desde rama: ${rama} --"
         git url: urlGIT
    }

    stage('Compilación y empaquetado') {
        if (realizarCompilacion) {
           withMaven(
             maven: versionMaven,
             jdk: versionJDK

           ) {
                    echo "--- Compilación y empaquetado ---"
                    echo "JAVA_HOME: $JAVA_HOME"
                    sh "mvn clean package -DskipTests"
           }
            
        }
    }

    stage('Pruebas de Componentes') {
        if (analizarConSonar) {
        stage('Analisis con Sonar') {
            try {
                withEnv(["SONAR_SCANNER_OPTS=-Xms512m -Xmx1024m", "JAVA_HOME=${tool versionJDK}"]) {
                    def scannerHome = tool sonarScannerTool
                    withSonarQubeEnv(credentialsId: sonarToken, installationName: instalacionSonar) {
                        sh "${scannerHome}/bin/sonar-scanner -Dproject.settings=${WORKSPACE}/sonar.properties"
                        esperarQG = true
                    }
                }
            } catch (err) {
                echo "Error: ${err.toString()}"
                currentBuild.result = 'UNSTABLE'
            }
        }
        }

        if (esperarQG) {
            stage('Umbral de Calidad') {
                if (esperarQG) {
                    try {
                        sleep(10) 
                        timeout(time: 1, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error "${qg.status}: No se ha superado el umbral requerido de calidad"
                            }
                        }
                    } catch (err) {
                        echo err.toString()
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        if (analizarConOWASP) {
            stage('Análisis de dependencias') {
                try {
                    dependencyCheck additionalArguments: '''--format ALL''', odcInstallation: dependencyCheckTool
                } catch (err) {
                    echo err.toString()
                }
            }
        }

        if (realizarPruebasUnitarias) {
            stage('Ejecución pruebas unitarias') {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    withEnv(["JAVA_HOME=${versionJDK}"]) {
                        withMaven(maven: versionMaven) {
                            sh "mvn test"
                        }
                    }
                }
            }
        }
    }

    stage('Deploy') {
        if (realizarDespliegue) {
            script {
                deploy adapters: [tomcat9(credentialsId: "robot", path: '', url: "http://lab.tomcat:8080/")], contextPath: "/pruebasWebApp", war: "**/*.war"
            }
        }
    }

    post {
        success {
            dependencyCheckPublisher failedNewCritical: 5, failedNewHigh: 15, failedNewLow: 30, failedNewMedium: 15, failedTotalCritical: 10, failedTotalHigh: 30, failedTotalLow: 60, failedTotalMedium: 30, pattern: '**/dependency-check-report.xml', unstableNewCritical: 3, unstableNewHigh: 5, unstableNewLow: 25, unstableNewMedium: 15, unstableTotalCritical: 5, unstableTotalHigh: 20, unstableTotalLow: 50, unstableTotalMedium: 20
            echo "Acción cuando se completa con éxito"
        }
        aborted {
            echo "--- Acciones cuando se aborta ---"
        }
        failure {
            echo "-- Acciones cuando se falla ---"
        }
        always {
            echo "--- SE EJECUTA SIEMPRE ---"
        }
    }
}
